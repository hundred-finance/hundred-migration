/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface HundredVestingInterface extends ethers.utils.Interface {
  functions: {
    "Hundred()": FunctionFragment;
    "beginVesting(address,uint256)": FunctionFragment;
    "claimVested()": FunctionFragment;
    "getClaimableVest(address)": FunctionFragment;
    "getClaimedVest(address)": FunctionFragment;
    "getRemainingVest(address)": FunctionFragment;
    "getTotalVest(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Hundred", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beginVesting",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableVest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedVest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingVest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVest",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "Hundred", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beginVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableVest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedVest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingVest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVest",
    data: BytesLike
  ): Result;

  events: {};
}

export class HundredVesting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HundredVestingInterface;

  functions: {
    Hundred(overrides?: CallOverrides): Promise<[string]>;

    "Hundred()"(overrides?: CallOverrides): Promise<[string]>;

    beginVesting(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "beginVesting(address,uint256)"(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimVested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVested()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClaimableVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getClaimableVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimedVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getClaimedVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRemainingVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRemainingVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  Hundred(overrides?: CallOverrides): Promise<string>;

  "Hundred()"(overrides?: CallOverrides): Promise<string>;

  beginVesting(
    beneficiary: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "beginVesting(address,uint256)"(
    beneficiary: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimVested(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVested()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClaimableVest(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getClaimableVest(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimedVest(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getClaimedVest(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRemainingVest(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRemainingVest(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalVest(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalVest(address)"(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    Hundred(overrides?: CallOverrides): Promise<string>;

    "Hundred()"(overrides?: CallOverrides): Promise<string>;

    beginVesting(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "beginVesting(address,uint256)"(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimVested(overrides?: CallOverrides): Promise<void>;

    "claimVested()"(overrides?: CallOverrides): Promise<void>;

    getClaimableVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimableVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimedVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimedVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRemainingVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    Hundred(overrides?: CallOverrides): Promise<BigNumber>;

    "Hundred()"(overrides?: CallOverrides): Promise<BigNumber>;

    beginVesting(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "beginVesting(address,uint256)"(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimVested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVested()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClaimableVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimableVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimedVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimedVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRemainingVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Hundred(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "Hundred()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beginVesting(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "beginVesting(address,uint256)"(
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimVested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVested()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimableVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimedVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimedVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRemainingVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVest(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalVest(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
